What is JavaScript? How does it differ from other programming languages?


Explain the difference between undefined and null in JavaScript.

undefined is a primitive value that is automatically assigned to variables that have been declared but have not been assigned a value. It indicates the absence of a value
null is an assignment value that represents the interntional absence of any object value. usually to indicate that a variable or object has no value oro is empty

What are the different data types in JavaScript?

undefined: represents an undefined value.
null: represents the absence of an object value
boolean: represents a logical value of either true or false
number: represents numeric values
string: represents a sequence of characters
object: represents a collection of key-value pairs
symbol: represents a unique identifier

How do you declare variables in JavaScript? What are the differences between var, let, and const?

declaring

var variable_name
let variable_name
const variable_name

var: has a function scope and can be redeclared and reassigned within its scope

let: has a block scope and can be reassigned within its scope, but not redeclared

const: also has a block scope but is used for variables that should not be reassigned once they are assigned a value. It cannot be redeclared or reassigned

What is the purpose of the `this` keyword in JavaScript?

The `this` keyword refers to the object that is currently executing the code. It's value is determined dinamically based on how a function is called. In a method, `this` refers to the object that the method belongs to. In a function `this` refers to the global object(example `window` in a browser or `global`in Node.js) or can be set explicitly using call, apply, or bind methods

What are the different ways to define a function in JavaScript?

Function declaration: function function_name(){}
Function Expression: const function_name = function(){}
Arrow Functions: const function_name = ()=>{}
IIFE(Immediately Invoked Function Expression): (function(){})();



Explain the concept of hoisting in JavaScript.

Hoisting is a mechanism where variable and function declarations are moved to the top of their containing scope during the compilation phase.

How does prototypal inheritance work in JavaScript?

JavaScript uses prototypal inheritance, where objects can inherit properties and methods from other objects. Every object in JavaScript has an internal property called [[Prototype]], which references another object or null. When you access a property or method on an object, and it is not found, JavaScript automatically looks for it in its prototype chain until it reaches the null value.

What is the event loop in JavaScript, and how does it facilitate asynchronous programming?

The event loop is a mechanism in JavaScript that handles asynchronous operations. It continuously checks the call stack and the task queue. When the call stack is empty, it picks the next function from the task queue and pushes it onto the call stack for execution. This allows JavaScript to perform non-blocking I/O operations and handle asynchronous events effectively.

How do you handle errors and exceptions in JavaScript?

In JavaScript, you can handle errors and exceptions using try-catch blocks. Code that might throw an exception is placed within the try block, and if an exception occurs, it is caught in the catch block. This allows you to gracefully handle errors, log messages, or take alternative actions.


Explain the concept of closures in JavaScript and provide an example.

Closures are functions that have access to variables from their outer (enclosing) function scope, even after the outer function has finished executing. The inner function maintains a reference to its outer function's variables. This allows the inner function to access and manipulate those variables. Closures are commonly used for data privacy and creating functions with persistent state.

example:

function outer(){
    var outerVariable = 'Hello';

    function inner(){
        console.log(outerVariable);
    }

    return inner;
}

vsar closureFunction = outer();
closureFunction(); // output: Hello

What are arrow functions in JavaScript? How do they differ from regular functions?

Arrow functions are a concise syntax introduced in ES6 for writing functions in JavaScript. They have a shorter syntax compared to regular functions and do not bind their own this value. Arrow functions inherit the this value from their surrounding scope.

What is the purpose of the bind, call, and apply methods in JavaScript?

These methods are used to manipulate the this value of a function and optionally pass arguments to it:

bind: Creates a new function with the provides `this` value and any specified arguments. It does not Immediately invoke the function.
call: Invokes a function with a specific `this` value and arguments passed individually.
apply: Invokes a function with a specific `this` value and arguments passed as an array or an array-like object.


How do you manipulate the DOM (Document Object Model) using JavaScript?

JavaScript provides methods and properties to manipulate the DOM, allowing you to dynamically change the content and structure of a web page. Some commonly used methods include getElementById, querySelector, createElement, appendChild, removeChild, setAttribute, and addEventListener.

Explain the concept of AJAX and how it can be used to make asynchronous requests in JavaScript.

AJAX (Asynchronous JavaScript and XML) is a technique for making asynchronous HTTP requests from a web page. It allows you to update parts of a web page without reloading the entire page. In modern web development, JSON is commonly used instead of XML for data exchange. AJAX requests are typically made using the XMLHttpRequest object or the newer fetch API.


What are promises in JavaScript? How do they help in handling asynchronous operations?


Promises are a way to handle asynchronous operations in JavaScript. They represent a future value or an eventual completion of an asynchronous operation. Promises have three states: pending, fulfilled, or rejected. They provide a clean and structured way to handle asynchronous code, allowing you to chain operations and handle success or failure with .then() and .catch() methods.


What is the purpose of the async and await keywords in JavaScript?

The async keyword is used to define an asynchronous function, which always returns a promise. The await keyword is used inside an async function to pause the execution and wait for a promise to resolve. It allows writing asynchronous code that resembles synchronous code, making it easier to handle promises.


How do you handle cross-origin resource sharing (CORS) in JavaScript?

CORS is a security mechanism that restricts cross-origin HTTP requests made from a web page. To handle CORS, you can set appropriate headers on the server-side to allow cross-origin requests. Additionally, on the client-side, you can use the XMLHttpRequest or fetch API to make CORS requests, and the browser will handle the preflight and response based on the server's CORS headers.

What is localStorage and sessionStorage in JavaScript? How do they differ?

localStorage and sessionStorage are web storage APIs that allow web applications to store key-value pairs locally in a user's browser. The main difference between them is in their persistence and scope:

localStorage: Stores data with no expiration date. The data persists even when the browser is closes and is available across different browser windows or tabs.

sessionStorage: Stores data for the duration of the session. The data is available only within the same window or tab and is cleared when the window or tab is closes.


How would you optimize the performance of a JavaScript application?

To optimize the performance of a JavaScript application, you can:

Minify and compress JavaScript files.
Reduce HTTP requests by combining or bundling files.
Use asynchronous loading and deferred execution of scripts.
Optimize DOM manipulation by minimizing repaints and reflows.
Implement efficient algorithms and data structures.
Use event delegation for event handling.
Apply caching techniques for frequently accessed data.
Use lazy loading for resources like images and scripts.
Profile and analyze code using browser developer tools.

